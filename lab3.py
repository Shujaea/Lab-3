import numpy as npimport matplotlib.pyplot as pltimport scipy.signal as sigimport pandas as pd def step(t):    y = np.zeros((len(t),1))    for i in range(len(t)):        if t[i] >= 0:            y[i] = 1        else:            y[i]= 0    return y       steps = 1e-4t = np.arange(-5, 10 + steps, steps)y = step(t)def ramp(t):    y = np.zeros((len(t),1))    for i in range(len(t)):        if t[i]>=0:            y[i] = t[i]        else:            y[i] = 0    return y      y = ramp(t)def f1(t):    y = step(t- 2) - step(t - 9)    return ydef f2(t):    y = np.exp(-t)    return ydef f3(t):    y =  ramp(t - 2)*(step(t - 2) - step(t - 3)) + ramp(4 - t)*(step(t - 3) - step(t - 4))       return ysteps = 1e-2t = np.arange(0, 20 + steps, steps)plt.figure(figsize = (10, 7))plt.subplot(3, 1, 1)plt.plot(t, f1(t))plt.ylabel('f1(t)')plt.title('User Defined Function ')plt.ylim([0, 1.2])plt.grid()plt.show()plt.subplot(3, 1, 2)plt.plot(t, f2(t))plt.ylabel('f2(t)')plt.ylim([0, 1.2])plt.grid()plt.show()plt.subplot(3, 1, 3)plt.plot(t, f3(t))plt.ylabel('f3(t)')plt.ylim([0, 1.2])plt.grid()plt.xlabel('t(s)')plt.show()    # Part2 def con(fu1, fu2):    conf1=len(fu1)    conf2=len(fu2)    f1E = np.append(fu1, np.zeros((1, conf2-1)))    f2E = np.append(fu2, np.zeros((1, conf1-1)))    Value = np.zeros(f1E.shape)    for i in range (conf2 + conf1 - 2):        Value[i] = 0        for j in range(conf1):            if(i - j + 1 > 0):                try:                    Value[i] += f1E[i]*f2E[i - j + 1]                except:                    print(i,j)    return Value                  steps = 1e-2t = np.arange(0, 20 + steps, steps)Num = len(t)tE = np.arange(0, 2*t[Num - 1], steps)fu1 = f1(t)fu2 = f2(t)fu3 = f3(t)con12 = con(fu1, fu2)*steps# con12Check = sig.convolve(fu1, fu2)*steps# size of f1 and f2 is differnt for some reason so it is not working.plt.figure(figsize = (10, 7))plt.plot(tE, con12, label = ".fined Conv")# plt.plot(tE, con12Check, '-', label = 'Built in Conv')plt.ylim([0, 1.2])plt.grid()plt.legend()plt.xlabel('t(s)')plt.ylabel('fun1(t) * fun2(t)')plt.title('Conv of fun1 , fun2')plt.show()con23 = con(fu2, fu3)*steps# con23Check = sig.convolve(fu2, fu3)*stepsplt.figure(figsize = (10, 7))plt.plot(tE, con23, label = 'User defined Conv')# plt.plot(tE, con23Check, '-', label = 'Built in Conv')plt.ylim([0, 0.2])plt.grid()plt.legend()plt.xlabel('t [s]')plt.ylabel('f_2(t) * f_3(t)')plt.title('Convolution of f_2 and f_3')plt.show()con13 = con(fu1, fu3)*stepscon13Check = sig.convolve(fu1, fu3)*stepsplt.figure(figsize = (10, 7))plt.plot(tE, con13, label = 'User defined Conv')plt.plot(tE, con13Check, '-', label = 'Built in Conv')plt.ylim([0, 1.2])plt.grid()plt.legend()plt.xlabel('t [s]')plt.ylabel('f_1(t) * f_3(t)')plt.title('Convolution of f_1 and f_3')plt.show() 